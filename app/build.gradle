plugins {
    alias(libs.plugins.android.application)
    id "org.sonarqube" version "6.0.1.5171"
}

sonar {
    properties {
        property "sonar.projectKey", "erwan-serandour_testing-2"
        property "sonar.organization", "erwan-serandour"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

android {
    namespace 'net.jamnig.testing_2'
    compileSdk 35

    defaultConfig {
        applicationId "net.jamnig.testing_2"
        minSdk 30
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}


task logClasspath {
    doLast {
        try {
            // Attempt to load the class
            def clazz = Class.forName("org.apache.commons.compress.archivers.tar.TarArchiveInputStream")
            def location = clazz.protectionDomain?.codeSource?.location
            if (location) {
                println "Class org.apache.commons.compress.archivers.tar.TarArchiveInputStream is loaded from: $location"
            } else {
                println "Class org.apache.commons.compress.archivers.tar.TarArchiveInputStream is loaded, but location is unknown."
            }
        } catch (ClassNotFoundException e) {
            println "Class org.apache.commons.compress.archivers.tar.TarArchiveInputStream not found in the classpath."
        }
    }
}

tasks.named("build").configure {
    finalizedBy logClasspath
}

tasks.named("sonarqube").configure {
    dependsOn logClasspath
}
